{"ast":null,"code":"var _jsxFileName = \"/Users/prazeet/effect-practice/src/EffectTest.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EffectTest = () => {\n  _s();\n  const [windowWidth, setWindowWidth] = useState(window.screen.width);\n  const [windowHeight, setWindowHeight] = useState(window.screen.height);\n  //   const handleResize = () => {\n  //     setWindowWidth(window.screen.width);\n  //   };\n\n  const justTest = () => {\n    let a = Math.random() * 100;\n    setWindowWidth(a);\n  };\n  const justTest2 = () => {\n    let a = Math.random() * 100;\n    setWindowHeight(a);\n  };\n  useEffect(() => {\n    console.log(\"on every render\");\n  });\n  useEffect(() => {\n    console.log(\"just on test 2 \");\n    return () => {\n      console.log(\"unmounted by using cleanup function, what this does is it cleansup the previous effect used in this use effect hook. we can do this to diconnect the current connction to the database and do a reconnection\");\n    };\n  }, [windowHeight]);\n  useEffect(() => {\n    console.log(\"just once\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: windowWidth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: justTest,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: justTest2,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(EffectTest, \"aVgiVVYz0thlv1zl8s5OW6uY1xQ=\");\n_c = EffectTest;\nexport default EffectTest;\nvar _c;\n$RefreshReg$(_c, \"EffectTest\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","EffectTest","_s","windowWidth","setWindowWidth","window","screen","width","windowHeight","setWindowHeight","height","justTest","a","Math","random","justTest2","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","type","_c","$RefreshReg$"],"sources":["/Users/prazeet/effect-practice/src/EffectTest.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\n\nconst EffectTest = () => {\n  const [windowWidth, setWindowWidth] = useState(window.screen.width);\n  const [windowHeight, setWindowHeight] = useState(window.screen.height);\n//   const handleResize = () => {\n//     setWindowWidth(window.screen.width);\n//   };\n\n  const justTest = () =>{\n    let a = Math.random() *100;\n    setWindowWidth(a)\n  }\n\n\n  const justTest2 = () =>{\n    let a = Math.random() *100;\n    setWindowHeight(a)\n  }\n  useEffect(() => {\n    \n    \n    console.log(\"on every render\");\n\n  });\n\n\n  useEffect(() => {\n    \n    \n    console.log(\"just on test 2 \");\n\n    return ()=>{\n        console.log(\"unmounted by using cleanup function, what this does is it cleansup the previous effect used in this use effect hook. we can do this to diconnect the current connction to the database and do a reconnection\");\n    }\n\n  }, [windowHeight]);\n\n\n  useEffect(() => {\n    \n    \n    console.log(\"just once\");\n\n  }, []);\n  \n\n\n  return (\n    <>\n      <div>{windowWidth}</div>\n      <input onChange={justTest} type=\"text\"  />\n      <input onChange={justTest2} type=\"text\"  />\n    </>\n  );\n};\n\nexport default EffectTest;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAACU,MAAM,CAACC,MAAM,CAACC,KAAK,CAAC;EACnE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAACU,MAAM,CAACC,MAAM,CAACI,MAAM,CAAC;EACxE;EACA;EACA;;EAEE,MAAMC,QAAQ,GAAGA,CAAA,KAAK;IACpB,IAAIC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAE,GAAG;IAC1BV,cAAc,CAACQ,CAAC,CAAC;EACnB,CAAC;EAGD,MAAMG,SAAS,GAAGA,CAAA,KAAK;IACrB,IAAIH,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAE,GAAG;IAC1BL,eAAe,CAACG,CAAC,CAAC;EACpB,CAAC;EACDhB,SAAS,CAAC,MAAM;IAGdoB,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAEhC,CAAC,CAAC;EAGFrB,SAAS,CAAC,MAAM;IAGdoB,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAE9B,OAAO,MAAI;MACPD,OAAO,CAACC,GAAG,CAAC,8MAA8M,CAAC;IAC/N,CAAC;EAEH,CAAC,EAAE,CAACT,YAAY,CAAC,CAAC;EAGlBZ,SAAS,CAAC,MAAM;IAGdoB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EAE1B,CAAC,EAAE,EAAE,CAAC;EAIN,oBACEnB,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAMf;IAAW;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxBxB,OAAA;MAAOyB,QAAQ,EAAEZ,QAAS;MAACa,IAAI,EAAC;IAAM;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC1CxB,OAAA;MAAOyB,QAAQ,EAAER,SAAU;MAACS,IAAI,EAAC;IAAM;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA,eAC3C,CAAC;AAEP,CAAC;AAACpB,EAAA,CArDID,UAAU;AAAAwB,EAAA,GAAVxB,UAAU;AAuDhB,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}